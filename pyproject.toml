[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "credit-risk-modeling"
version = "1.0.0"
description = "Advanced Credit Risk Modeling with Multi-level Stacking Ensemble for Probability of Default (PD) Prediction"
authors = [
  { name = "Duong, N.C.K", email = "dgngn03.forwork.dta@gmail.com" },
]
license = { file = "LICENSE" }
readme = "README.md"
homepage = "https://github.com/dylanng3/pd_modeling_project"
repository = "https://github.com/dylanng3/pd_modeling_project"
documentation = "https://dylanng3.github.io/pd_modeling_project"
keywords = ["credit-risk", "machine-learning", "probability-of-default", "ensemble", "xgboost", "lightgbm", "catboost"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "Intended Audience :: Science/Research",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "xgboost>=1.6.0",
    "lightgbm>=3.3.0",
    "catboost>=1.0.0",
    "optuna>=3.0.0",
    "shap>=0.41.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "tqdm>=4.62.0",
    "scipy>=1.7.0",
    "jupyter>=1.0.0",
    "ipython>=7.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=3.0.0",
    "ruff>=0.1.0",
    "black>=22.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=8.0.0",
    "mkdocstrings[python]>=0.19.0",
]
torch = [
    "torch>=1.12.0",
    "torchvision>=0.13.0",
]
all = [
    "credit-risk-modeling[dev,docs,torch]"
]

[project.urls]
"Bug Reports" = "https://github.com/dylanng3/pd_modeling_project/issues"
"Source" = "https://github.com/dylanng3/pd_modeling_project"
"Documentation" = "https://dylanng3.github.io/pd_modeling_project"

[project.scripts]
credit-risk-train = "src.main:main"
credit-risk-predict = "src.modeling.predict:main"
credit-risk-validate = "src.validation.performance_metrics:main"


[tool.ruff]
line-length = 99
target-version = "py38"
src = ["src"]
include = ["pyproject.toml", "src/**/*.py", "tests/**/*.py", "notebooks/**/*.py"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "data/",
    "models/",
    "validation_results/",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "xgboost.*",
    "lightgbm.*",
    "catboost.*",
    "optuna.*",
    "shap.*",
    "matplotlib.*",
    "seaborn.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 99
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | data
  | models
  | validation_results
)/
'''

